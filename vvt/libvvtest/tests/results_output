#!/usr/bin/env python

# Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.

#RUNTEST:

import sys
sys.dont_write_bytecode = True
sys.excepthook = sys.__excepthook__
import os
import time
import re
import glob
from os.path import getsize as getfsize

try:
    from StringIO import StringIO
except Exception:
    from io import StringIO

import vvtestutils as vtu
import testutils as util
from testutils import print3

import libvvtest.resultswriter as resultswriter
import libvvtest.outpututils as outpututils
from libvvtest.consolewriter import ConsoleWriter
import libvvtest.gitlabwriter as gitlabwriter
import libvvtest.TestSpec as TestSpec
from libvvtest.TestList import createTestObjects
from libvvtest.RuntimeConfig import RuntimeConfig
from libvvtest.teststatus import TestStatusHandler, DIFF_EXIT_STATUS


class misc_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self )

        self.statushandler = TestStatusHandler()

    def makeTest(self, result=None, runtime=None, name='atest'):
        ""
        return vtu.make_fake_TestSpec( self.statushandler, result, runtime, name )

    def test_make_date_stamp(self):
        ""
        tm0 = time.mktime( time.strptime( 'Sun Oct 11 13:20:58 2018' ) )
        tm1 = tm0 - 600

        s = outpututils.make_date_stamp( tm0, None )
        assert s == '2018_10_11'

        s = outpututils.make_date_stamp( tm0, None, "%Y-%m-%d_%H:%M:%S" )
        assert s == '2018-10-11_13:20:58'

        s = outpututils.make_date_stamp( tm0, 'foobar' )
        assert s == 'foobar'

        s = outpututils.make_date_stamp( tm0, tm1, "%Y-%m-%d_%H:%M:%S" )
        assert s == '2018-10-11_13:10:58'

    def getFakeTestList(self):
        ""
        return [ self.makeTest( 'pass' ),
                 self.makeTest( 'fail' ),
                 self.makeTest( 'fail' ),
                 self.makeTest( 'diff' ),
                 self.makeTest( 'diff' ),
                 self.makeTest( 'diff' ),
                 self.makeTest( 'timeout' ),
                 self.makeTest( 'timeout' ),
                 self.makeTest( 'notdone' ),
                 self.makeTest( 'notrun' ),
                 self.makeTest( 'notrun' ),
                 self.makeTest( 'notrun' ),
                 self.makeTest( 'skip' ),
                 self.makeTest( 'skip' ),
               ]

    def test_partition_then_summary_string(self):
        ""
        tL = self.getFakeTestList()

        parts = outpututils.partition_tests_by_result( self.statushandler, tL )
        sumry = outpututils.results_summary_string( parts )
        vtu.assert_summary_string( sumry, npass=1, fail=2, diff=3,
                                          timeout=2, notdone=1, notrun=3,
                                          skip=2 )

    def assert_test_list_summary(self, output):
        ""
        assert re.search( 'completed.* 6', output ) != None
        assert re.search( '1 pass', output ) != None
        assert re.search( '3 diff', output ) != None
        assert re.search( '2 fail', output ) != None
        assert re.search( '2 timeout', output ) != None
        assert re.search( 'notdone.* 1', output ) != None
        assert re.search( 'notrun.* 3', output ) != None
        assert re.search( 'skip.* 2', output ) != None
        assert re.search( '2 due to ', output ) != None

    def test_abbreviated_console_output(self):
        ""
        tlist = MockTestList( self.statushandler, self.getFakeTestList() )

        sio = StringIO()
        conwr = ConsoleWriter( self.statushandler, sio, os.getcwd() )
        conwr.writeListSummary( tlist, 'Test list:' )

        val = sio.getvalue()
        print3( val )
        self.assert_test_list_summary( val )
        assert 'Test list:' in val
        assert 'Summary:' not in val

        sio = StringIO()
        conwr = ConsoleWriter( self.statushandler, sio, os.getcwd() )
        conwr.writeListSummary( tlist, 'Summary:' )

        val = sio.getvalue()
        self.assert_test_list_summary( val )
        assert 'Test list:' not in val
        assert 'Summary:' in val

    def test_postrun_console_output(self):
        ""
        tlist = MockTestList( self.statushandler, self.getFakeTestList() )

        sio = StringIO()
        conwr = ConsoleWriter( self.statushandler, sio, os.getcwd() )
        conwr.writeResultsList( tlist )
        conwr.writeListSummary( tlist, 'Summary:' )

        val = sio.getvalue()
        self.assert_test_list_summary( val )
        cntD = vtu.parse_vvtest_counts( val )
        assert cntD['total'] == 8
        assert cntD['diff'] == 3
        assert cntD['fail'] == 2
        assert cntD['timeout'] == 2
        assert cntD['notdone'] == 1

        sio = StringIO()
        conwr = ConsoleWriter( self.statushandler, sio, os.getcwd() )
        conwr.setMaxNonPass( 3 )
        conwr.writeResultsList( tlist )
        conwr.writeListSummary( tlist, 'Summary:' )

        val = sio.getvalue()
        print3( val )
        self.assert_test_list_summary( val )
        cntD = vtu.parse_vvtest_counts( val )
        assert cntD['total'] == 3

    def test_max_detail_console_list_output(self):
        ""
        tlist = MockTestList( self.statushandler, self.getFakeTestList() )

        sio = StringIO()
        conwr = ConsoleWriter( self.statushandler, sio, os.getcwd(), verbose=3 )
        conwr.writeResultsList( tlist )
        conwr.writeListSummary( tlist, 'Summary:' )

        val = sio.getvalue()
        print3( val )
        cntD = vtu.parse_vvtest_counts( val )
        assert cntD['skip'] == 2

    def test_list_output_using_double_verbose_flag(self):
        ""
        util.writefile( 'passtest.vvt', """
            pass
            """ )
        util.writefile( 'difftest.vvt', """
            import sys
            import vvtest_util as vvt
            sys.exit( vvt.diff_exit_status )
            """ )
        util.writefile( 'keywtest.vvt', """
            #VVT: keywords = chevy
            pass
            """ )
        util.writefile( 'plattest.vvt', """
            #VVT: enable (platforms="XBox")
            pass
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '-v -v -K chevy', batch=batch )
            vrun.assertCounts( total=4, npass=1, diff=1, skip=2 )


def write_three_test_files():
    ""
    util.writefile( "subdir/param.vvt", """
        #VVT: parameterize : hello = world mars
        import time
        time.sleep(1)
        """ )
    util.writefile( "FailTest.vvt", """
        import os, sys, time
        import vvtest_util as vvt
        time.sleep(2)
        raise Exception( 'pitch a fake exception' )
        """)
    util.writefile( "DiffTest.xml", """
        <rtest name="DiffTest">
            <parameterize np="1 2"/>
            <execute>
                sleep 3
                echo "fake difference of 29"
                set have_diff = yes
            </execute>
        </rtest>""")


class junit_output_format_tests( vtu.vvtestTestCase ):

    def test_reading_file_with_size_limit(self):
        ""
        util.writefile( 'afile.txt', """
            line one is number one
            line two is last one wins
            """ )
        time.sleep(1)

        buf = outpututils.file_read_with_limit( 'afile.txt', 10 )
        assert len( buf.splitlines() ) > 2
        assert len( util.greplines( 'line one', buf ) ) == 1
        assert len( util.greplines( 'line two', buf ) ) == 1

    def test_reading_a_file_that_has_its_middle_taken_out(self):
        ""
        line = 'All work and no play makes Jack a dull boy.\n'
        with open( 'afile.txt', 'w' ) as fp:
            fp.write( 'The Overlook Hotel.\n' )
            fp.write( line * 10000 )
            fp.write( 'REDRUM!  REDRUM!\n' )
        time.sleep(1)

        assert getfsize( 'afile.txt' ) > 1*1024
        buf = outpututils.file_read_with_limit( 'afile.txt', 1 )
        assert len( buf ) <= 1*1024
        assert len( buf.splitlines() ) > 10
        assert buf.lstrip().startswith( 'The Overlook Hotel' )
        assert buf.rstrip().endswith( 'REDRUM!  REDRUM!' )
        assert len( util.greplines(
                        'middle of this file has been removed', buf ) ) == 1

    def test_producing_a_JUnit_results_file(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

        vrun = vtu.runvvtest( '-i --junit=../ju.xml', chdir=vrun.resultsDir() )
        time.sleep(1)

        doc = read_xml( 'ju.xml' )
        self.assert_junit_test_names( doc )
        self.assert_output_for_diff_and_fail_tests( doc )

    def test_producing_a_JUnit_results_file_as_part_of_the_execution(self):
        ""
        write_three_test_files()
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--junit ju.xml', batch=batch )
            vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

            doc = read_xml( 'ju.xml' )
            self.assert_junit_test_names( doc )

    def assert_junit_test_names(self, doc):
        ""
        tL = []
        for nd in doc.getElementsByTagName('testcase'):
            tL.append( (nd.getAttribute('name'),nd.getAttribute('time')) )
        tL.sort()
        assert [ tup[0] for tup in tL ] == [ 'DiffTest.np=1',
                                             'DiffTest.np=2',
                                             'FailTest',
                                             'subdir/param.hello=mars',
                                             'subdir/param.hello=world' ]
        assert abs( int(tL[0][1]) - 4 ) <= 2
        assert abs( int(tL[1][1]) - 4 ) <= 2
        assert abs( int(tL[2][1]) - 3 ) <= 2
        assert abs( int(tL[3][1]) - 2 ) <= 2
        assert abs( int(tL[4][1]) - 2 ) <= 2

    def assert_output_for_diff_and_fail_tests(self, doc):
        ""
        for nd in doc.getElementsByTagName('testcase'):
            sysnd = find_child_node( nd, 'system-out' )
            if nd.getAttribute('name').startswith( 'DiffTest' ):
                txt = get_subtext_from_node(sysnd)
                assert 'fake difference of 29' in txt
            elif nd.getAttribute('name').startswith( 'FailTest' ):
                txt = get_subtext_from_node(sysnd)
                assert 'pitch a fake exception' in txt

    def test_no_tests_to_run_still_produces_a_junit_file(self):
        ""
        util.writefile( "subdir/param.vvt", """
            # error on purpose so vvtest skips this test
            #VVT: parameterize : hello
            pass
            """ )
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--junit ju.xml' )
            vrun.assertCounts( total=0 )

            assert os.path.exists( 'ju.xml' )
            doc = read_xml( 'ju.xml' )
            assert len( doc.getElementsByTagName('testcase') ) == 0


class html_output_format_tests( vtu.vvtestTestCase ):

    def test_producing_an_HTML_results_file(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

        vrun = vtu.runvvtest( '-i --html=../tr.htm', chdir=vrun.resultsDir() )
        time.sleep(1)

        doc = read_xml( 'tr.htm' )
        lines = get_status_lines_from_html( doc )
        self.assert_tests_in_html( lines )

    def assert_tests_in_html(self, lines):
        ""
        assert len( lines ) == 5
        linestr = ' '.join(lines)
        assert len( util.greplines( 'FailTest', linestr ) ) == 1
        assert len( util.greplines( 'DiffTest.np=1', linestr ) ) == 1
        assert len( util.greplines( 'DiffTest.np=2', linestr ) ) == 1
        assert len( util.greplines( 'subdir/param.hello=mars', linestr ) ) == 1
        assert len( util.greplines( 'subdir/param.hello=world', linestr ) ) == 1

    def test_producing_an_HTML_results_file_as_part_of_execution(self):
        ""
        write_three_test_files()
        time.sleep(1)

        for batch in [False,True]:

            vtu.remove_results()

            vrun = vtu.runvvtest( '--html tr.html' )
            vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )
            time.sleep(1)

            doc = read_xml( 'tr.html' )
            lines = get_status_lines_from_html( doc )
            self.assert_tests_in_html( lines )


class gitlab_output_format_tests( vtu.vvtestTestCase ):

    def setUp(self):
        ""
        vtu.vvtestTestCase.setUp( self )

        self.statushandler = TestStatusHandler()

    def makeTest(self, result=None, runtime=None, name='atest'):
        ""
        return vtu.make_fake_TestSpec( self.statushandler, result, runtime, name )

    def test_turning_a_path_to_a_markdown_link(self):
        ""
        s = gitlabwriter.format_test_path_for_gitlab( 'sub/name.np=1', False )
        assert s == 'sub/name.np=1'

        s = gitlabwriter.format_test_path_for_gitlab( 'sub/name.np=1', True )
        assert s == '[sub/name.np=1](sub_name.np=1.md)'

    def test_write_table_line_for_a_test(self):
        ""
        handler = self.statushandler

        tst = self.makeTest( 'pass', 5 )
        line = gitlabwriter.format_gitlab_table_line( handler, tst, True )
        print3( line )
        sL = [ s.strip() for s in line.split( '|' )[1:-1] ]
        assert len(sL) == 4
        assert sL[0] == 'pass' and sL[2] == '5s'
        assert sL[3] == 'sdir/atest.np=4'

        tst = self.makeTest( 'fail', 7 )
        line = gitlabwriter.format_gitlab_table_line( handler, tst, True )
        print3( line )
        sL = [ s.strip() for s in line.split( '|' )[1:-1] ]
        assert len(sL) == 4
        assert sL[0] == 'fail' and sL[2] == '7s'
        assert sL[3] == '[sdir/atest.np=4](sdir_atest.np=4.md)'

        tst = self.makeTest( 'fail', 7 )
        line = gitlabwriter.format_gitlab_table_line( handler, tst, False )
        print3( line )
        sL = [ s.strip() for s in line.split( '|' )[1:-1] ]
        assert len(sL) == 4
        assert sL[0] == 'fail' and sL[2] == '7s'
        assert sL[3] == 'sdir/atest.np=4'

    def test_write_gitlab_results_table(self):
        ""
        handler = self.statushandler

        tL = [ self.makeTest( 'pass', 5, 'good' ),
               self.makeTest( 'diff', 5, 'bad' ) ]

        sio = StringIO()
        gitlabwriter.write_gitlab_results_table( sio, handler, 'mixed', tL, 100 )

        val = sio.getvalue()
        print3( val )
        assert len( util.greplines( 'Result*Date*Time*Path', val ) ) == 1
        assert len( util.greplines( '| sdir/good.np=4 |', val ) ) == 1
        line = grepforline( 'sdir/bad.np=4', val ).rstrip()
        assert line.endswith( '[sdir/bad.np=4](sdir_bad.np=4.md) |' )

    def test_write_results_table_with_max_path_links(self):
        ""
        handler = self.statushandler

        tL = [ self.makeTest( 'diff', 5, 'testA' ),
               self.makeTest( 'diff', 5, 'testB' ),
               self.makeTest( 'diff', 5, 'testC' ),
               self.makeTest( 'diff', 5, 'testD' ) ]

        sio = StringIO()
        gitlabwriter.write_gitlab_results_table( sio, handler, 'diff', tL, 2 )

        val = sio.getvalue()
        print3( val )

        line = grepforline( 'sdir/testA.np=4', val ).rstrip()
        assert line.endswith( '[sdir/testA.np=4](sdir_testA.np=4.md) |' )

        line = grepforline( 'sdir/testB.np=4', val ).rstrip()
        assert line.endswith( '[sdir/testB.np=4](sdir_testB.np=4.md) |' )

        line = grepforline( 'sdir/testC.np=4', val ).rstrip()
        assert line.endswith( 'sdir/testC.np=4 |' )

        line = grepforline( 'sdir/testD.np=4', val ).rstrip()
        assert line.endswith( 'sdir/testD.np=4 |' )

    def test_that_large_results_tables_go_to_separate_file(self):
        ""
        handler = self.statushandler

        tL = [ self.makeTest( 'fail', 5, 'testA' ),
               self.makeTest( 'fail', 5, 'testB' ),
               self.makeTest( 'fail', 5, 'testC' ),
               self.makeTest( 'fail', 5, 'testD' ) ]

        sio = StringIO()
        gitlabwriter.write_gitlab_results( sio, handler, 'fail', tL, 'large.md', 2, 3 )
        time.sleep(1)

        val = sio.getvalue()
        assert len( util.greplines( 'Tests that fail = 4', val ) ) == 1
        assert 'large.md' in val
        assert 'sdir/test' not in val
        assert len( util.grepfiles( 'Tests that fail = 4', 'large.md' ) ) == 1
        assert len( util.grepfiles( 'sdir/test', 'large.md' ) ) == 4

        fval = util.readfile( 'large.md' )

        line = grepforline( 'sdir/testC.np=4', fval ).rstrip()
        assert line.endswith( '[sdir/testC.np=4](sdir_testC.np=4.md) |' )

        line = grepforline( 'sdir/testD.np=4', fval ).rstrip()
        assert line.endswith( 'sdir/testD.np=4 |' )

    def test_an_empty_test_list_will_not_write_a_table(self):
        ""
        tL = []

        sio = StringIO()
        gitlabwriter.write_gitlab_results( sio, None, 'fail', tL, 'nope.md', 2, 3 )
        time.sleep(1)

        val = sio.getvalue()
        print3( val )
        assert len( util.greplines( 'Tests that fail', val ) ) == 1
        assert len( util.greplines( 'Result*Date*Time*Path', val ) ) == 0

    def test_file_meta_data_collection(self):
        ""
        util.writefile( 'subdir/zeebra.txt', "I am a zeebra.\n" * 20 )
        time.sleep(1)
        util.writefile( 'subdir/ardvaark.txt', "I am an ardvaark.\n" * 21 )
        time.sleep(1)

        fL,width = gitlabwriter.get_directory_file_list( 'subdir' )
        assert fL == [ 'zeebra.txt', 'ardvaark.txt' ]
        assert width == 12

        meta = gitlabwriter.get_file_meta_data_string( 'subdir/zeebra.txt', 10 )
        print3( meta )

        meta = gitlabwriter.get_file_meta_data_string( 'subdir/foobar.txt', 10 )
        print3( meta )
        assert 'error: ' in meta

        os.symlink( 'ardvaark.txt', 'subdir/ardvark.txt' )
        time.sleep(1)

        meta = gitlabwriter.get_file_meta_data_string( 'subdir/ardvark.txt', 10 )
        print3( meta )
        assert 'error:' not in meta

    def test_write_gitlab_collapsable_file_contents(self):
        ""
        util.writefile( 'file.txt', """
            Text with a < and a > and a & and some "quotes" too.
            ```
            This is line two.
            """ )
        time.sleep(1)

        sio = StringIO()
        fn = os.path.abspath('file.txt')
        gitlabwriter.write_gitlab_formatted_file( sio, fn, True, 'label', 10 )

        val = sio.getvalue()
        #print3( val )
        assert len( util.greplines( '<code>label', val ) ) == 1
        assert fn not in val
        assert 'Text with a' in val
        assert '< and a > and a & and some "quotes"' in val
        assert val.count( '```' ) == 2 and "'''" in val

        sio = StringIO()
        fn = os.path.abspath('file.exo')
        gitlabwriter.write_gitlab_formatted_file( sio, fn, False, 'label', 10 )

        val = sio.getvalue()
        #print3( val )
        assert len( util.greplines( '<code>label', val ) ) == 1
        assert fn not in val
        assert 'Text with a' not in val
        assert 'file not archived' in val

    def test_write_gitlab_collapsable_file_with_read_error(self):
        ""
        sio = StringIO()
        fn = os.path.abspath('file.txt')
        gitlabwriter.write_gitlab_formatted_file( sio, fn, True, 'label', 10 )

        val = sio.getvalue()
        #print3( val )
        assert fn in val
        assert 'error reading file:' in val
        assert 'Traceback' in val

    def test_write_gitlab_collapsable_file_with_leading_backticks(self):
        ""
        util.writefile( 'file.txt', """```
            Another line.
            """ )
        time.sleep(1)

        sio = StringIO()
        fn = os.path.abspath('file.txt')
        gitlabwriter.write_gitlab_formatted_file( sio, fn, True, 'label', 10 )

        val = sio.getvalue()
        #print3( val )
        assert 'Another line' in val
        assert val.count( '```' ) == 2 and val.count( "'''" ) == 1

    def test_stream_file_contents_to_gitlab_collapsable_format(self):
        ""
        class MockSelector:
            def include(self, filename):
                return True

        self.write_file_pair()
        time.sleep(1)

        sio = StringIO()
        gitlabwriter.stream_gitlab_files( sio, '.', MockSelector(), 10 )

        val = sio.getvalue()
        #print3( val )
        assert 'This is line two' in val
        assert 'file.txt' in val
        assert 'execute.log' in val
        assert 'This is the stdout and stderr' in val

    def write_file_pair(self, subdir='.'):
        ""
        util.writefile( os.path.join( subdir,'file.txt' ), """
            Text with a < and a > and a & and some "quotes" too.
            This is line two.
            """ )
        util.writefile( os.path.join( subdir,'execute.log' ), """
            This is the stdout and stderr
            from running the test.
            """ )

    def test_stream_file_contents_but_exclude_certain_files(self):
        ""
        class MockSelector:
            def include(self, filename):
                return os.path.splitext(filename)[1] == '.log'

        self.write_file_pair()
        time.sleep(1)

        sio = StringIO()
        gitlabwriter.stream_gitlab_files( sio, '.', MockSelector(), 10 )

        val = sio.getvalue()
        #print3( val )
        assert 'This is line two' not in val
        assert 'execute.log' in val

    def test_create_file_with_directory_contents(self):
        ""
        self.write_file_pair( 'subdir' )
        util.writefile( 'subdir/junk.exo', """
            this should not be included
            """ )
        time.sleep(1)

        preamble = 'Houston, we have a problem.'
        converter = gitlabwriter.GitLabMarkDownConverter( None, None, None )
        converter.createGitlabDirectoryContents(
                                    'results.md', preamble, 'subdir' )
        time.sleep(1)

        assert len( util.grepfiles( preamble, 'results.md' ) ) == 1
        assert len( util.grepfiles( 'file.txt', 'results.md' ) ) == 1
        assert len( util.grepfiles( 'execute.log', 'results.md' ) ) == 1
        assert len( util.grepfiles( 'should not be included', 'results.md' ) ) == 0

    def test_create_file_directory_contents_but_directory_does_not_exist(self):
        ""
        preamble = 'Houston, we have a problem.'
        converter = gitlabwriter.GitLabMarkDownConverter( None, None, None )
        converter.createGitlabDirectoryContents(
                                    'results.md', preamble, 'subdir' )
        time.sleep(1)

        assert len( util.grepfiles( preamble, 'results.md' ) ) == 1
        assert len( util.grepfiles( 'error collecting files', 'results.md' ) ) == 1
        assert len( util.grepfiles( 'Traceback', 'results.md' ) ) == 1

    def test_test_run_attributes(self):
        ""
        conv = gitlabwriter.GitLabMarkDownConverter( '.', '.', None )
        conv.saveResults( [] )
        time.sleep(1)

        fval = util.readfile( 'TestResults.md' ).strip()
        val = fval.split( '## Tests that', 1 )[0]
        assert val.strip() == ''

        conv = gitlabwriter.GitLabMarkDownConverter( '.', '.', None )
        tm = time.time()
        conv.setRunAttr( startdate=str(tm)+' / '+time.ctime(tm),
                         finishdate=str(tm+10)+' / '+time.ctime(tm+10) )
        conv.saveResults( [] )
        time.sleep(1)

        fval = util.readfile( 'TestResults.md' ).strip()
        val = fval.split( '## Tests that', 1 )[0]
        assert len( util.greplines( 'startdate', val ) ) == 1
        assert len( util.greplines( 'finishdate', val ) ) == 1

    def test_create_markdown_file_for_a_test(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

        nofltr = RuntimeConfig( platform_name=vrun.platformName() )
        tL = createTestObjects( '.', 'DiffTest.xml', None, nofltr )
        tst = tL[0]

        self.statushandler.startRunning( tst )
        self.statushandler.markDone( tst, DIFF_EXIT_STATUS )
        self.statushandler.setRuntime( tst, 3 )

        conv = gitlabwriter.GitLabMarkDownConverter(
                                        vrun.resultsDir(), '.',
                                        self.statushandler )
        conv.createTestFile( tst )
        time.sleep(1)

        mdfile = util.globfile( 'DiffTest.*.md' )
        xdir = os.path.join( vrun.resultsDir(), tst.getExecuteDirectory() )
        assert len( util.grepfiles( 'Run directory:*'+xdir, mdfile ) ) == 1
        assert len( util.grepfiles( 'Result:*DiffTest *diff *', mdfile ) ) == 1

    def test_producing_gitlab_markdown_results_files(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest()
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )

        vrun = vtu.runvvtest( '-i --gitlab=../gfm', chdir=vrun.resultsDir() )
        time.sleep(1)

        assert getfsize( 'gfm/TestResults.md' ) > 800
        assert getfsize( 'gfm/FailTest.md' ) > 3000
        assert getfsize( 'gfm/DiffTest.np=1.md' ) > 1000
        assert getfsize( 'gfm/DiffTest.np=2.md' ) > 1000
        assert len( glob.glob( 'gfm/*param*' ) ) == 0

    def test_producing_gitlab_markdown_as_part_of_execution(self):
        ""
        write_three_test_files()
        time.sleep(1)

        vrun = vtu.runvvtest( '--gitlab gfm' )
        vrun.assertCounts( total=5, npass=2, diff=2, fail=1 )
        time.sleep(1)

        assert getfsize( 'gfm/TestResults.md' ) > 800
        assert getfsize( 'gfm/FailTest.md' ) > 3000
        assert getfsize( 'gfm/DiffTest.np=1.md' ) > 1000
        assert getfsize( 'gfm/DiffTest.np=2.md' ) > 1000
        assert len( glob.glob( 'gfm/*param*' ) ) == 0

        fval = util.readfile( 'gfm/TestResults.md' ).strip()
        val = fval.split( '## Tests that', 1 )[0]
        assert len( util.greplines( 'startdate', val ) ) == 1
        assert len( util.greplines( 'finishdate', val ) ) == 1
        assert len( util.greplines( ' vvtest =', val ) ) == 1
        assert len( util.greplines( ' python =', val ) ) == 1
        assert len( util.greplines( ' PATH =', val ) ) == 1
        elap = util.greplines( 'elapsed', val )[0].split('=')[1].strip()
        assert int( elap[:-1] ) > 1


###########################################################################

def grepforline( pattern, multi_line_string ):
    ""
    lineL = util.greplines( pattern, multi_line_string )
    assert len( lineL ) == 1
    return lineL[0]


def read_xml( filename ):
    ""
    import xml
    import xml.dom.minidom as minidom
    doc = minidom.parse( filename )
    return doc


def print_xml( domnode, indent='' ):
    ""
    if domnode.localName:
        print3( indent, domnode.localName )
    if domnode.hasChildNodes():
        for nd in domnode.childNodes:
            print_xml( nd, indent+'  ' )


def get_status_lines_from_html( htmldoc ):
    ""
    lines = []

    nodes = gather_list_items_starting_with( htmldoc, 'Status:' )
    for nd in nodes:
        assert nd.hasChildNodes()
        lines.append( get_subtext_from_node( nd ) )

    return lines


def gather_list_items_starting_with( doc, starttext ):
    ""
    nodes = []

    for nd in doc.getElementsByTagName('li'):
        if nd.hasChildNodes:
            firstchild = nd.childNodes[0]
            val = firstchild.nodeValue
            if val and val.strip().startswith( starttext ):
                nodes.append( nd )

    return nodes


def get_subtext_from_node( node ):
    """
    Concatenates XML element content from all children and their children.
    """
    txt = ''

    if node.hasChildNodes():
        for subnd in node.childNodes:
            if subnd.nodeValue and subnd.nodeValue.strip():
                txt += subnd.nodeValue
            for subsubnd in subnd.childNodes:
                if subsubnd.nodeValue and subsubnd.nodeValue.strip():
                    txt += subsubnd.nodeValue

    return txt


def find_child_node( node, childname ):
    ""
    child = None

    if node.hasChildNodes():
        for subnd in node.childNodes:
            if subnd.nodeName and subnd.nodeName.strip() == childname:
                child = subnd
                break

    return child



class MockTestList:

    def __init__(self, statushandler, list_of_TestSpec):
        ""
        self.statushandler = statushandler
        self.tspecs = list_of_TestSpec

    def getTests(self):
        ""
        return self.tspecs

    def getActiveTests(self, sorting=''):
        ""
        tL = []
        for tspec in self.tspecs:
            if not self.statushandler.skipTest( tspec ):
                tL.append( tspec )
        tL.sort()

        return tL


############################################################################

util.run_test_cases( sys.argv, sys.modules[__name__] )
